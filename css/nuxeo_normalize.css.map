{"version":3,"sources":["../node_modules/open-sans-fontface/sass/_Regular.scss","../scss/_nuxeo-mixins.scss","../node_modules/open-sans-fontface/sass/_Italic.scss","../node_modules/open-sans-fontface/sass/_Semibold.scss","../node_modules/open-sans-fontface/sass/_SemiboldItalic.scss","../node_modules/open-sans-fontface/sass/_Bold.scss","../node_modules/open-sans-fontface/sass/_BoldItalic.scss","../node_modules/open-sans-fontface/sass/_ExtraBold.scss","../node_modules/open-sans-fontface/sass/_ExtraBoldItalic.scss","../scss/_nuxeo-base.scss","../scss/_settings.scss","../scss/components/_highlightjs.scss","../scss/components/_codeblock.scss","../node_modules/foundation-sites/scss/typography/_base.scss","../node_modules/foundation-sites/scss/util/_unit.scss","../node_modules/foundation-sites/scss/util/_breakpoint.scss"],"names":[],"mappings":"AACA,WACE,wBCAA,6EACA,oYDCA,mBACA,iBAAkB,CEJpB,WACE,wBDAA,2EACA,2XCCA,mBACA,iBAAkB,CCJpB,WACE,wBFAA,+EACA,6YECA,gBACA,iBAAkB,CCJpB,WACE,wBHAA,2FACA,mcGCA,gBACA,iBAAkB,CCJpB,WACE,wBJAA,uEACA,yWICA,iBACA,iBAAkB,CCJpB,WACE,wBLAA,mFACA,+ZKCA,iBACA,iBAAkB,CCJpB,WACE,wBNAA,iFACA,sZMCA,gBACA,iBAAkB,CCJpB,WACE,wBPAA,6FACA,4cOCA,gBACA,iBAAkB,CCoBlB,EACE,0EClBmF,CDmBpF,MEvBC,gBACA,WACA,cACA,gBACA,YAAa,CACd,0BAIC,aAAc,CACf,sEAOC,UAAW,CACZ,uCAIC,UAAW,CACZ,oEAMC,UAAW,CACZ,2EAQC,UAAW,CACZ,8FASC,UAAW,CACZ,4BAIC,UAAW,CACZ,cAGC,sBACA,iBAAkB,CACnB,uCAIC,aACF,CAAE,eAGA,wBAAyB,CAC1B,eAGC,wBAAyB,CAC1B,0BAIC,gBAAiB,CAClB,eAGC,iBAAkB,CC9EpB,KACE,kBACA,wBAAyB,CAEzB,OACE,gBAAiB,CAClB,IAKD,gBACA,yBACA,kBACA,WACA,mDACA,0BACA,gBACA,oBACA,eACA,cACA,cACA,kBACA,oBAAqB,CAbvB,eAgBI,kBACA,QACA,KAAM,CAlBV,iBAsBI,sBACA,yBACA,kBACA,2EACA,WACA,UACA,UACA,gBACA,2BAA4B,CA9BhC,uBAsCM,wBFjByB,CErB/B,4BA0CM,iBAAkB,CA1CxB,mCA+CM,4CACA,2BACA,SACA,kBACA,WACA,yBACA,aACA,gBACA,sBACA,UACA,gBACA,oBACA,kBACA,kBACA,qBACA,iBACA,oBACA,gBACA,qBACA,eAAgB,CAlEtB,oCAuEM,6BACA,sBACA,WACA,aACA,SACA,UACA,oBACA,kBACA,QACA,eAAgB,CACjB,kCAIC,KACE,SAAU,CAGZ,GACE,SAAU,CAAA,CA1FlB,AAiFK,0BAIC,KACE,SAAU,CAGZ,GACE,SAAU,CAAA,CA1FlB,2PAoGQ,4BACA,AADA,oBACA,+BACA,AADA,uBACA,qCACA,AADA,6BACA,sCACA,AADA,8BACA,0CACA,AADA,kCACA,qBACA,oBAAqB,CA1G7B,sCA4HQ,eACA,UACA,QAAS,CA9HjB,uCAkIQ,oCACA,YACA,kBACA,UACA,QAAS,CAtIjB,sCA2IM,kBAAmB,CA3IzB,uBAiJI,SAAU,CAjJd,SAqJI,uBACA,SACA,UFhJM,CEPV,cA0JM,sBAAuB,CACxB,cAMH,cACA,+DACA,kBACA,mBACA,gBACA,oBACA,iCCxFsC,CD0FtC,gBACE,QAAS,CAVb,gDAgBI,YAAa,CACd,cAgBK,kBEzH+C,CC2EnD,2CH6CE,cACE,mBEzH+C,CF0HhD,CAAA","file":"nuxeo_normalize.css","sourcesContent":["/* BEGIN Regular */\n@font-face {\n  font-family: 'Open Sans';\n  @include fontdef($OpenSansPath, $OpenSansVersion, \"Regular\");\n  font-weight: normal;\n  font-style: normal;\n}\n/* END Regular */\n","// This is from open-sans-fontface mixin because everyone uses _mixins.scss so there's a conflict\n@mixin fontdef($OpenSansPath, $OpenSansVersion, $FontType:\"Regular\") {\n  src:  url('#{$OpenSansPath}/#{$FontType}/OpenSans-#{$FontType}.eot?v=#{$OpenSansVersion}');\n  src:  url('#{$OpenSansPath}/#{$FontType}/OpenSans-#{$FontType}.eot?#iefix&v=#{$OpenSansVersion}') format('embedded-opentype'),\n        url('#{$OpenSansPath}/#{$FontType}/OpenSans-#{$FontType}.woff?v=#{$OpenSansVersion}') format('woff'),\n        url('#{$OpenSansPath}/#{$FontType}/OpenSans-#{$FontType}.ttf?v=#{$OpenSansVersion}') format('truetype'),\n        url('#{$OpenSansPath}/#{$FontType}/OpenSans-#{$FontType}.svg?v=#{$OpenSansVersion}##{$FontType}') format('svg');\n}\n","/* BEGIN Italic */\n@font-face {\n  font-family: 'Open Sans';\n  @include fontdef($OpenSansPath, $OpenSansVersion, \"Italic\");\n  font-weight: normal;\n  font-style: italic;\n}\n/* END Italic */\n","/* BEGIN Semibold */\n@font-face {\n  font-family: 'Open Sans';\n  @include fontdef($OpenSansPath, $OpenSansVersion, \"Semibold\");\n  font-weight: 600;\n  font-style: normal;\n}\n/* END Semibold */\n","/* BEGIN Semibold Italic */\n@font-face {\n  font-family: 'Open Sans';\n  @include fontdef($OpenSansPath, $OpenSansVersion, \"SemiboldItalic\");\n  font-weight: 600;\n  font-style: italic;\n}\n/* END Semibold Italic */\n","/* BEGIN Bold */\n@font-face {\n  font-family: 'Open Sans';\n  @include fontdef($OpenSansPath, $OpenSansVersion, \"Bold\");\n  font-weight: bold;\n  font-style: normal;\n}\n/* END Bold */\n","/* BEGIN Bold Italic */\n@font-face {\n  font-family: 'Open Sans';\n  @include fontdef($OpenSansPath, $OpenSansVersion, \"BoldItalic\");\n  font-weight: bold;\n  font-style: italic;\n}\n/* END Bold Italic */\n","/* BEGIN Extrabold */\n@font-face {\n  font-family: 'Open Sans';\n  @include fontdef($OpenSansPath, $OpenSansVersion, \"ExtraBold\");\n  font-weight: 800;\n  font-style: normal;\n}\n/* END Extrabold */\n","/* BEGIN Extrabold Italic */\n@font-face {\n  font-family: 'Open Sans';\n  @include fontdef($OpenSansPath, $OpenSansVersion, \"ExtraBoldItalic\");\n  font-weight: 800;\n  font-style: italic;\n}\n/* END Extrabold Italic */\n","// Nuxeo Base styling\n@import 'settings';\n\n// Nuxeo Mixins\n@import 'nuxeo-mixins';\n\n// @import 'Light';\n// @import 'LightItalic';\n@import 'Regular';\n@import 'Italic';\n@import 'Semibold';\n@import 'SemiboldItalic';\n@import 'Bold';\n@import 'BoldItalic';\n@import 'ExtraBold';\n@import 'ExtraBoldItalic';\n\n// Foundation base\n@import 'foundation';\n\n// Optional components that can be included outside of nuxeo-base-styles\n@import 'components/codeblock';\n\n@mixin nuxeo-base-styles {\n  // We could include settings and the base Foundation styles here\n  * {\n    font-family: $nuxeo-font-family;\n  }\n}\n","// Fonts\n$OpenSansPath: '//www.nuxeo.com/assets/fonts' !default;\n$OpenSansVersion: '1.1.0' !default;\n\n// Foundation helpers\n@import 'util/util';\n\n// Variables for use across the mixins\n$nuxeo-font-family: 'Open Sans', Roboto, 'Helvetica Neue', Helvetica, Arial, sans-serif;\n\n// Colours\n\n$foundation-palette: (\n  primary: #0067ff,\n  secondary: #73d2cf,\n  success: #3adb76,\n  warning: #ffae00,\n  alert: #cc4b37,\n);\n\n@include add-foundation-colors;\n\n$white: #fff;\n$black: #000;\n\n\n$nuxeo-color-darker-gray: #333;\n\n$nuxeo-color-accent: #ff452a;\n$nuxeo-color-accent-yellow: #e8ff7f;\n\n$nuxeo-color-light-blue: #ecf3f7;\n$nuxeo-color-dark-background: #000522;\n\n// Code Block\n$nuxeo-color-code-background: $white;\n$nuxeo-color-code-foreground: $black;\n$nuxeo-color-code-border: #d9e6f0;\n$code-border-radius: 4px;\n\n// Tooltips\n$tooltip-background-color: rgba(0, 0, 0, .8);\n$tooltip-text-color: $white;\n$tooltip-duration: .4s;\n$tooltip-delay: .2s;\n","\n@mixin nuxeo-highlightjs {\n  // Based upon Google Code style (c) Aahan Krish <geekpanth3r@gmail.com>\n  .hljs {\n    background: $nuxeo-color-code-background;\n    color: $nuxeo-color-code-foreground;\n    display: block;\n    overflow-x: auto;\n    padding: .5em;\n  }\n\n  .hljs-comment,\n  .hljs-quote {\n    color: #6a1b9a;\n  }\n\n  .hljs-keyword,\n  .hljs-selector-tag,\n  .hljs-section,\n  .hljs-title,\n  .hljs-name {\n    color: #008;\n  }\n\n  .hljs-variable,\n  .hljs-template-variable {\n    color: #660;\n  }\n\n  .hljs-string,\n  .hljs-selector-attr,\n  .hljs-selector-pseudo,\n  .hljs-regexp {\n    color: #080;\n  }\n\n  .hljs-literal,\n  .hljs-symbol,\n  .hljs-bullet,\n  .hljs-meta,\n  .hljs-number,\n  .hljs-link {\n    color: #066;\n  }\n\n  .hljs-title,\n  .hljs-doctag,\n  .hljs-type,\n  .hljs-attr,\n  .hljs-built_in,\n  .hljs-builtin-name,\n  .hljs-params {\n    color: #606;\n  }\n\n  .hljs-attribute,\n  .hljs-subst {\n    color: #000;\n  }\n\n  .hljs-formula {\n    background-color: #eee;\n    font-style: italic;\n  }\n\n  .hljs-selector-id,\n  .hljs-selector-class {\n    color: #9B703F\n  }\n\n  .hljs-addition {\n    background-color: #baeeba;\n  }\n\n  .hljs-deletion {\n    background-color: #ffc8bd;\n  }\n\n  .hljs-doctag,\n  .hljs-strong {\n    font-weight: bold;\n  }\n\n  .hljs-emphasis {\n    font-style: italic;\n  }\n}\n","@import 'highlightjs';\n\n@mixin nuxeo-codeblock {\n  @include nuxeo-highlightjs;\n\n  // Inline code\n  code {\n    border-radius: $code-border-radius;\n    overflow-wrap: break-word;\n\n    a > & {\n      border: 1px solid;\n    }\n  }\n\n  // Code block\n  pre {\n    background: $nuxeo-color-code-background;\n    border: solid 2px $nuxeo-color-code-border;\n    border-radius: $code-border-radius;\n    color: $nuxeo-color-code-foreground;\n    font-family: 'Courier 10 Pitch', Courier, monospace;\n    font-size: 15px !important;\n    line-height: 1.6;\n    margin-bottom: 1.6em;\n    max-width: 100%;\n    overflow: auto;\n    padding: 1.6em;\n    position: relative;\n    white-space: pre-wrap;\n\n    .copy-area {\n      position: absolute;\n      right: 0;\n      top: 0;\n    }\n\n    .copy-button {\n      background-color: lighten($nuxeo-color-code-border, 15%);\n      border: 1px solid #d5d5d5;\n      border-radius: 3px;\n      font-family: $nuxeo-font-family;\n      margin: 4px;\n      opacity: 0;\n      outline: 0;\n      padding: 4px 6px;\n      transition: opacity .4s ease;\n\n      &,\n      &:focus,\n      &:active {\n      }\n\n      &:hover {\n        background-color: $nuxeo-color-code-border;\n      }\n\n      &.tooltipped {\n        position: relative;\n      }\n\n      // This is the tooltip bubble\n      &.tooltipped::after {\n        -webkit-font-smoothing: subpixel-antialiased;\n        background: $tooltip-background-color;\n        border: 0;\n        border-radius: 3px;\n        color: $tooltip-text-color;\n        content: attr(aria-label);\n        display: none;\n        font-size: .8rem;\n        letter-spacing: normal;\n        opacity: 0;\n        padding: 5px 8px;\n        pointer-events: none;\n        position: absolute;\n        text-align: center;\n        text-decoration: none;\n        text-shadow: none;\n        text-transform: none;\n        white-space: pre;\n        word-wrap: break-word;\n        z-index: 1000000;\n      }\n\n      // This is the tooltip arrow\n      &.tooltipped::before {\n        border: 5px solid transparent;\n        color: $tooltip-background-color;\n        content: '';\n        display: none;\n        height: 0;\n        opacity: 0;\n        pointer-events: none;\n        position: absolute;\n        width: 0;\n        z-index: 1000001;\n      }\n\n      // // delay animation for tooltip\n      @keyframes tooltip-appear {\n        from {\n          opacity: 0;\n        }\n\n        to {\n          opacity: 1;\n        }\n      }\n\n      // This will indicate when we'll activate the tooltip\n      &.tooltipped:hover,\n      &.tooltipped:active,\n      &.tooltipped:focus {\n        &::before,\n        &::after {\n          animation-delay: $tooltip-delay;\n          animation-duration: $tooltip-duration;\n          animation-fill-mode: forwards;\n          animation-name: tooltip-appear;\n          animation-timing-function: ease-in;\n          display: inline-block;\n          text-decoration: none;\n        }\n      }\n\n      // .tooltipped-no-delay:hover,\n      // .tooltipped-no-delay:active,\n      // .tooltipped-no-delay:focus {\n      //   &::before,\n      //   &::after {\n      //     opacity: 1;\n      //     animation: none;\n      //   }\n      // }\n\n\n      // Tooltipped south\n      &.tooltipped-sw {\n        &::after {\n          margin-top: 5px;\n          right: 50%;\n          top: 100%;\n        }\n\n        &::before {\n          border-bottom-color: $tooltip-background-color;\n          bottom: -5px;\n          margin-right: -5px;\n          right: 50%;\n          top: auto;\n        }\n      }\n\n      &.tooltipped-sw::after {\n        margin-right: -15px;\n      }\n    }\n\n\n    &:hover .copy-button {\n      opacity: 1;\n    }\n\n    > code {\n      background: transparent;\n      border: 0;\n      color: $nuxeo-color-code-foreground;\n\n      > code {\n        background: transparent;\n      }\n    }\n  }\n\n  // Code panel\n  .code-heading {\n    color: $header-color;\n    font-family: $header-font-family;\n    font-style: $header-font-style;\n    font-weight: $header-font-weight;\n    line-height: $header-lineheight;\n    margin-bottom: -1rem;\n    text-rendering: $header-text-rendering;\n\n    p & {\n      margin: 0;\n    }\n\n    // Ignore empty paragraphs added by Markdown\n    ~ p:blank,\n    ~ p:empty {\n      display: none;\n    }\n  }\n\n  // code-header - Same as h4\n  @if variable-exists(header-sizes) {\n    @each $size, $headers in $header-sizes {\n      @include breakpoint($size) {\n        .code-heading {\n          font-size: rem-calc(map-get($headers, 'h4'));\n        }\n      }\n    }\n  } @else {\n    @each $size, $headers in $header-styles {\n      @include breakpoint($size) {\n        .code-heading {\n          font-size: rem-calc(map-get(map-get($headers, 'h4'), 'font-size'));\n        }\n      }\n    }\n  }\n}\n","// Foundation for Sites by ZURB\n// foundation.zurb.com\n// Licensed under MIT Open Source\n\n////\n/// @group typography-base\n////\n\n// Base Typography\n// - - - - - - - - - - - - - - -\n// These are styles applied to basic HTML tags, including:\n//   - Paragraphs <p>\n//   - Bold/italics <b> <strong> <i> <em>\n//   - Small text <small>\n//   - Headings <h1>-<h6>\n//   - Anchors <a>\n//   - Dividers <hr>\n//   - Lists <ul> <ol> <dl>\n//   - Blockquotes <blockquote>\n//   - Code blocks <code>\n//   - Abbreviations <abbr>\n//   - Citations <cite>\n//   - Keystrokes <kbd>\n\n/// Font family for header elements.\n/// @type String | List\n$header-font-family: $body-font-family !default;\n\n/// Font weight of headers.\n/// @type String\n$header-font-weight: $global-weight-normal !default;\n\n/// Font style (e.g. italicized) of headers.\n/// @type String\n$header-font-style: normal !default;\n\n/// Font stack used for elements that use monospaced type, such as code samples\n/// @type String | List\n$font-family-monospace: Consolas, 'Liberation Mono', Courier, monospace !default;\n\n/// Color of headers.\n/// @type Color\n$header-color: inherit !default;\n\n/// Line height of headers.\n/// @type Number\n$header-lineheight: 1.4 !default;\n\n/// Bottom margin of headers.\n/// @type Number\n$header-margin-bottom: 0.5rem !default;\n\n/// Styles for headings at various screen sizes. Each key is a breakpoint, and each value is a map of heading styles.\n/// @type Map\n$header-styles: (\n  small: (\n    'h1': ('font-size': 24),\n    'h2': ('font-size': 20),\n    'h3': ('font-size': 19),\n    'h4': ('font-size': 18),\n    'h5': ('font-size': 17),\n    'h6': ('font-size': 16),\n  ),\n  medium: (\n    'h1': ('font-size': 48),\n    'h2': ('font-size': 40),\n    'h3': ('font-size': 31),\n    'h4': ('font-size': 25),\n    'h5': ('font-size': 20),\n    'h6': ('font-size': 16),\n  ),\n) !default;\n\n// $header-styles map is built from $header-sizes in order to ensure downward compatibility\n// when $header-sizes is depreciated, $header-styles needs to get !default values like settings.scss\n@function build_from_header-sizes($header-sizes) {\n  @warn 'Note, that $header-sizes has been replaced with $header-styles. $header-sizes still works, but it is going to be depreciated.';\n  $header-styles: ();\n  @each $size, $headers in $header-sizes {\n    $header-map: ();\n    @each $header, $font-size in $headers {\n      $header-map: map-merge($header-map, ($header: ('font-size': $font-size)));  \n    }\n    $header-styles: map-merge($header-styles, ($size: $header-map));\n  }\n  @return $header-styles;\n}\n\n// If it exists $headers-sizes is used to build $header-styles. See the documentation.\n@if variable-exists(header-sizes) {\n  $header-styles: build_from_header-sizes($header-sizes);\n}\n\n/// Text rendering method of headers.\n/// @type String\n$header-text-rendering: optimizeLegibility !default;\n\n/// Font size of `<small>` elements.\n/// @type Number\n$small-font-size: 80% !default;\n\n/// Color of `<small>` elements when placed inside headers.\n/// @type Color\n$header-small-font-color: $medium-gray !default;\n\n/// Line height of text inside `<p>` elements.\n/// @type Number\n$paragraph-lineheight: 1.6 !default;\n\n/// Bottom margin of paragraphs.\n/// @type Number\n$paragraph-margin-bottom: 1rem !default;\n\n/// Text rendering method for paragraph text.\n/// @type String\n$paragraph-text-rendering: optimizeLegibility !default;\n\n/// Text color of code samples.\n/// @type Color\n$code-color: $black !default;\n\n/// Font family of code samples.\n/// @type String | List\n$code-font-family: $font-family-monospace !default;\n\n/// Font weight of text in code samples.\n/// @type String\n$code-font-weight: $global-weight-normal !default;\n\n/// Background color of code samples.\n/// @type Color\n$code-background: $light-gray !default;\n\n/// Border around code samples.\n/// @type List\n$code-border: 1px solid $medium-gray !default;\n\n/// Padding around text of code samples.\n/// @type Number | List\n$code-padding: rem-calc(2 5 1) !default;\n\n/// Default color for links.\n/// @type Color\n$anchor-color: $primary-color !default;\n\n/// Default color for links on hover.\n/// @type Color\n$anchor-color-hover: scale-color($anchor-color, $lightness: -14%) !default;\n\n/// Default text decoration for links.\n/// @type String\n$anchor-text-decoration: none !default;\n\n/// Default text decoration for links on hover.\n/// @type String\n$anchor-text-decoration-hover: none !default;\n\n/// Maximum width of a divider.\n/// @type Number\n$hr-width: $global-width !default;\n\n/// Default border for a divider.\n/// @type List\n$hr-border: 1px solid $medium-gray !default;\n\n/// Default margin for a divider.\n/// @type Number | List\n$hr-margin: rem-calc(20) auto !default;\n\n/// Line height for items in a list.\n/// @type Number\n$list-lineheight: $paragraph-lineheight !default;\n\n/// Bottom margin for items in a list.\n/// @type Number\n$list-margin-bottom: $paragraph-margin-bottom !default;\n\n/// Bullet type to use for unordered lists (e.g., `square`, `circle`, `disc`).\n/// @type String\n$list-style-type: disc !default;\n\n/// Positioning for bullets on unordered list items.\n/// @type String\n$list-style-position: outside !default;\n\n/// Left (or right) margin for lists.\n/// @type Number\n$list-side-margin: 1.25rem !default;\n\n/// Left (or right) margin for a list inside a list.\n/// @type Number\n$list-nested-side-margin: 1.25rem !default;\n\n/// Bottom margin for `<dl>` elements.\n/// @type Number\n$defnlist-margin-bottom: 1rem !default;\n\n/// Font weight for `<dt>` elements.\n/// @type String\n$defnlist-term-weight: $global-weight-bold !default;\n\n/// Spacing between `<dt>` and `<dd>` elements.\n/// @type Number\n$defnlist-term-margin-bottom: 0.3rem !default;\n\n/// Text color of `<blockquote>` elements.\n/// @type Color\n$blockquote-color: $dark-gray !default;\n\n/// Padding inside a `<blockquote>` element.\n/// @type Number | List\n$blockquote-padding: rem-calc(9 20 0 19) !default;\n\n/// Side border for `<blockquote>` elements.\n/// @type List\n$blockquote-border: 1px solid $medium-gray !default;\n\n/// Font size for `<cite>` elements.\n/// @type Number\n$cite-font-size: rem-calc(13) !default;\n\n/// Text color for `<cite>` elements.\n/// @type Color\n$cite-color: $dark-gray !default;\n\n/// Pseudo content for `<cite>` elements.\n/// @type String\n$cite-pseudo-content: '\\2014 \\0020' !default;\n\n/// Font family for `<kbd>` elements.\n/// @type String | List\n$keystroke-font: $font-family-monospace !default;\n\n/// Text color for `<kbd>` elements.\n/// @type Color\n$keystroke-color: $black !default;\n\n/// Background color for `<kbd>` elements.\n/// @type Color\n$keystroke-background: $light-gray !default;\n\n/// Padding for `<kbd>` elements.\n/// @type Number | List\n$keystroke-padding: rem-calc(2 4 0) !default;\n\n/// Border radius for `<kbd>` elements.\n/// @type Number | List\n$keystroke-radius: $global-radius !default;\n\n/// Bottom border style for `<abbr>` elements.\n/// @type List\n$abbr-underline: 1px dotted $black !default;\n\n@mixin foundation-typography-base {\n  // Typography resets\n  div,\n  dl,\n  dt,\n  dd,\n  ul,\n  ol,\n  li,\n  h1,\n  h2,\n  h3,\n  h4,\n  h5,\n  h6,\n  pre,\n  form,\n  p,\n  blockquote,\n  th,\n  td {\n    margin: 0;\n    padding: 0;\n  }\n\n  // Paragraphs\n  p {\n    margin-bottom: $paragraph-margin-bottom;\n\n    font-size: inherit;\n    line-height: $paragraph-lineheight;\n    text-rendering: $paragraph-text-rendering;\n  }\n\n  // Emphasized text\n  em,\n  i {\n    font-style: italic;\n    line-height: inherit;\n  }\n\n  // Strong text\n  strong,\n  b {\n    font-weight: $global-weight-bold;\n    line-height: inherit;\n  }\n\n  // Small text\n  small {\n    font-size: $small-font-size;\n    line-height: inherit;\n  }\n\n  // Headings\n  h1, .h1,\n  h2, .h2,\n  h3, .h3,\n  h4, .h4,\n  h5, .h5,\n  h6, .h6 {\n    font-family: $header-font-family;\n    font-style: $header-font-style;\n    font-weight: $header-font-weight;\n    color: $header-color;\n    text-rendering: $header-text-rendering;\n\n    small {\n      line-height: 0;\n      color: $header-small-font-color;\n    }\n  }\n\n  // Heading styles\n  @each $size, $headers in $header-styles {\n    @include breakpoint($size) {\n      @each $header, $header-defs in $headers {\n        $font-size-temp: 1rem;\n        #{$header}, .#{$header} {\n\n          @if map-has-key($header-defs, font-size) {\n            $font-size-temp: rem-calc(map-get($header-defs, font-size));\n            font-size: $font-size-temp;\n          } @else if map-has-key($header-defs, fs) {\n            $font-size-temp: rem-calc(map-get($header-defs, fs));\n            font-size: $font-size-temp;\n          } @else if $size == $-zf-zero-breakpoint {\n            font-size: $font-size-temp;\n          }\n          @if map-has-key($header-defs, line-height) {\n            line-height: unitless-calc(map-get($header-defs, line-height), $font-size-temp);\n          } @else if map-has-key($header-defs, lh) {\n            line-height: unitless-calc(map-get($header-defs, lh), $font-size-temp);\n          } @else if $size == $-zf-zero-breakpoint {\n            line-height: unitless-calc($header-lineheight, $font-size-temp);\n          }\n\n          @if map-has-key($header-defs, margin-top) {\n            margin-top: rem-calc(map-get($header-defs, margin-top));\n          } @else if map-has-key($header-defs, mt) {\n            margin-top: rem-calc(map-get($header-defs, mt));\n          } @else if $size == $-zf-zero-breakpoint {\n            margin-top: 0;\n          }\n          @if map-has-key($header-defs, margin-bottom) {\n            margin-bottom: rem-calc(map-get($header-defs, margin-bottom));\n          } @else if map-has-key($header-defs, mb) {\n            margin-bottom: rem-calc(map-get($header-defs, mb));\n          } @else if $size == $-zf-zero-breakpoint {\n            margin-bottom: rem-calc($header-margin-bottom);\n          }\n        }\n      }\n    }\n  }\n\n  // Links\n  a {\n    line-height: inherit;\n    color: $anchor-color;\n    text-decoration: $anchor-text-decoration;\n\n    cursor: pointer;\n\n    &:hover,\n    &:focus {\n      color: $anchor-color-hover;\n      @if $anchor-text-decoration-hover != $anchor-text-decoration {\n        text-decoration: $anchor-text-decoration-hover;\n      }\n    }\n\n    img {\n      border: 0;\n    }\n  }\n\n  // Horizontal rule\n  hr {\n    clear: both;\n\n    max-width: $hr-width;\n    height: 0;\n    margin: $hr-margin;\n\n    border-top: 0;\n    border-right: 0;\n    border-bottom: $hr-border;\n    border-left: 0;\n  }\n\n  // Lists\n  ul,\n  ol,\n  dl {\n    margin-bottom: $list-margin-bottom;\n    list-style-position: $list-style-position;\n    line-height: $list-lineheight;\n  }\n\n  // List items\n  li {\n    font-size: inherit;\n  }\n\n  // Unordered lists\n  ul {\n    margin-#{$global-left}: $list-side-margin;\n    list-style-type: $list-style-type;\n  }\n\n  // Ordered lists\n  ol {\n    margin-#{$global-left}: $list-side-margin;\n  }\n\n  // Nested unordered/ordered lists\n  ul, ol {\n    & & {\n      margin-#{$global-left}: $list-nested-side-margin;\n      margin-bottom: 0;\n    }\n  }\n\n  // Definition lists\n  dl {\n    margin-bottom: $defnlist-margin-bottom;\n\n    dt {\n      margin-bottom: $defnlist-term-margin-bottom;\n      font-weight: $defnlist-term-weight;\n    }\n  }\n\n  // Blockquotes\n  blockquote {\n    margin: 0 0 $paragraph-margin-bottom;\n    padding: $blockquote-padding;\n    border-#{$global-left}: $blockquote-border;\n\n    &, p {\n      line-height: $paragraph-lineheight;\n      color: $blockquote-color;\n    }\n  }\n\n  // Citations\n  cite {\n    display: block;\n    font-size: $cite-font-size;\n    color: $cite-color;\n\n    &:before {\n      content: $cite-pseudo-content;\n    }\n  }\n\n  // Abbreviations\n  abbr, abbr[title] {\n    border-bottom: $abbr-underline;\n    cursor: help;\n    text-decoration: none;\n  }\n\n  // Figures\n  figure {\n    margin: 0;\n  }\n  \n  // Code\n  code {\n    padding: $code-padding;\n\n    border: $code-border;\n    background-color: $code-background;\n\n    font-family: $code-font-family;\n    font-weight: $code-font-weight;\n    color: $code-color;\n  }\n\n  // Keystrokes\n  kbd {\n    margin: 0;\n    padding: $keystroke-padding;\n\n    background-color: $keystroke-background;\n\n    font-family: $keystroke-font;\n    color: $keystroke-color;\n\n    @if has-value($keystroke-radius) {\n      border-radius: $keystroke-radius;\n    }\n  }\n}\n","// Foundation for Sites by ZURB\n// foundation.zurb.com\n// Licensed under MIT Open Source\n\n////\n/// @group functions\n////\n\n$global-font-size: 100% !default;\n\n/// Removes the unit (e.g. px, em, rem) from a value, returning the number only.\n///\n/// @param {Number} $num - Number to strip unit from.\n///\n/// @returns {Number} The same number, sans unit.\n@function strip-unit($num) {\n  @return $num / ($num * 0 + 1);\n}\n\n/// Converts one or more pixel values into matching rem values.\n///\n/// @param {Number|List} $values - One or more values to convert. Be sure to separate them with spaces and not commas. If you need to convert a comma-separated list, wrap the list in parentheses.\n/// @param {Number} $base [null] - The base value to use when calculating the `rem`. If you're using Foundation out of the box, this is 16px. If this parameter is `null`, the function will reference the `$base-font-size` variable as the base.\n///\n/// @returns {List} A list of converted values.\n@function rem-calc($values, $base: null) {\n  $rem-values: ();\n  $count: length($values);\n\n  // If no base is defined, defer to the global font size\n  @if $base == null {\n    $base: $global-font-size;\n  }\n\n  // If the base font size is a %, then multiply it by 16px\n  // This is because 100% font size = 16px in most all browsers\n  @if unit($base) == '%' {\n    $base: ($base / 100%) * 16px;\n  }\n\n  // Using rem as base allows correct scaling\n  @if unit($base) == 'rem' {\n    $base: strip-unit($base) * 16px;\n  }\n\n  @if $count == 1 {\n    @return -zf-to-rem($values, $base);\n  }\n\n  @for $i from 1 through $count {\n    $rem-values: append($rem-values, -zf-to-rem(nth($values, $i), $base));\n  }\n\n  @return $rem-values;\n}\n\n// Converts a unitless, pixel, or rem value to em, for use in breakpoints.\n@function -zf-bp-to-em($value) {\n  // Pixel and unitless values are converted to rems\n  @if unit($value) == 'px' or unitless($value) {\n    $value: rem-calc($value, $base: 16px);\n  }\n\n  // Then the value is converted to ems\n  @return strip-unit($value) * 1em;\n}\n\n/// Converts a pixel value to matching rem value. *Any* value passed, regardless of unit, is assumed to be a pixel value. By default, the base pixel value used to calculate the rem value is taken from the `$global-font-size` variable.\n/// @access private\n///\n/// @param {Number} $value - Pixel value to convert.\n/// @param {Number} $base [null] - Base for pixel conversion.\n///\n/// @returns {Number} A number in rems, calculated based on the given value and the base pixel value. rem values are passed through as is.\n@function -zf-to-rem($value, $base: null) {\n  // Check if the value is a number\n  @if type-of($value) != 'number' {\n    @warn inspect($value) + ' was passed to rem-calc(), which is not a number.';\n    @return $value;\n  }\n\n  // Transform em into rem if someone hands over 'em's\n  @if unit($value) == 'em' {\n    $value: strip-unit($value) * 1rem;\n  }\n\n  // Calculate rem if units for $value is not rem or em\n  @if unit($value) != 'rem' {\n    $value: strip-unit($value) / strip-unit($base) * 1rem;\n  }\n\n  // Turn 0rem into 0\n  @if $value == 0rem {\n    $value: 0;\n  }\n\n  @return $value;\n}\n\n/// Converts a pixel, percentage, rem or em value to a unitless value based on a given font size. Ideal for working out unitless line heights.\n///\n/// @param {Number} $value - Value to convert to a unitless line height\n/// @param {Number} $base - The font size to use to work out the line height - defaults to $global-font-size\n///\n/// @return {Number} - Unitless number\n@function unitless-calc($value, $base: null) {\n\n  // If no base is defined, defer to the global font size\n  @if $base == null {\n    $base: $global-font-size;\n  }\n\n  // First, lets convert our $base to pixels\n\n  // If the base font size is a %, then multiply it by 16px\n  @if unit($base) == '%' {\n    $base: ($base / 100%) * 16px;\n  }\n\n  @if unit($base) == 'rem' {\n    $base: strip-unit($base) * 16px;\n  }\n\n  @if unit($base) == 'em' {\n    $base: strip-unit($base) * 16px;\n  }\n\n  // Now lets convert our value to pixels too\n  @if unit($value) == '%' {\n    $value: ($value / 100%) * $base;\n  }\n\n  @if unit($value) == 'rem' {\n    $value: strip-unit($value) * $base;\n  }\n\n  @if unit($value) == 'em' {\n    $value: strip-unit($value) * $base;\n  }\n\n  // 'px'\n  @if unit($value) == 'px' {\n    @return strip-unit($value) / strip-unit($base);\n  }\n\n  // assume that line-heights greatern then 10 are meant to be absolute in 'px'\n  @if unitless($value) and ($value > 10) {\n    @return $value / strip-unit($base);\n  }\n\n  @return $value;\n}\n","// Foundation for Sites by ZURB\n// foundation.zurb.com\n// Licensed under MIT Open Source\n\n////\n/// @group breakpoints\n////\n\n/// A list of named breakpoints. You can use these with the `breakpoint()` mixin to quickly create media queries.\n/// @type Map\n$breakpoints: (\n  small: 0,\n  medium: 640px,\n  large: 1024px,\n  xlarge: 1200px,\n  xxlarge: 1440px,\n) !default;\n\n/// The largest named breakpoint in which to include print as a media type\n/// @type Keyword\n$print-breakpoint: large !default;\n\n$-zf-zero-breakpoint: small !default;\n\n$-zf-breakpoints-keys: map-to-list($breakpoints, 'keys');\n\n@if nth(map-values($breakpoints), 1) != 0 {\n  @error 'Your smallest breakpoint (defined in $breakpoints) must be set to \"0\".';\n}\n@else {\n  $-zf-zero-breakpoint: nth(map-keys($breakpoints), 1);\n}\n\n/// All of the names in this list will be output as classes in your CSS, like `.small-12`, `.medium-6`, and so on. Each value in this list must also be in the `$breakpoints` map.\n/// @type List\n$breakpoint-classes: (small medium large) !default;\n\n/// Generates a media query string matching the input value. Refer to the documentation for the `breakpoint()` mixin to see what the possible inputs are.\n///\n/// @param {Keyword|Number} $val [small] - Breakpoint name, or px, rem, or em value to process.\n@function breakpoint($val: $-zf-zero-breakpoint) {\n  // Size or keyword\n  $bp: nth($val, 1);\n  // Value for max-width media queries\n  $bp-max: 0;\n  // Direction of media query (up, down, or only)\n  $dir: if(length($val) > 1, nth($val, 2), up);\n  // Eventual output\n  $str: '';\n  // Is it a named media query?\n  $named: false;\n\n  // Orientation media queries have a unique syntax\n  @if $bp == 'landscape' or $bp == 'portrait' {\n    @return '(orientation: #{$bp})';\n  }\n  @else if $bp == 'retina' {\n    @return '(-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi)';\n  }\n\n  // Try to pull a named breakpoint out of the $breakpoints map\n  @if type-of($bp) == 'string' {\n    @if map-has-key($breakpoints, $bp) {\n      @if $dir == 'only' or $dir == 'down' {\n        $bp-max: -zf-map-next($breakpoints, $bp);\n      }\n\n      $bp: map-get($breakpoints, $bp);\n      $named: true;\n    }\n    @else {\n      $bp: 0;\n      @warn 'breakpoint(): \"#{$val}\" is not defined in your $breakpoints setting.';\n    }\n  }\n\n  // Convert any pixel, rem, or unitless value to em\n  $bp: -zf-bp-to-em($bp);\n  @if $bp-max {\n    $bp-max: -zf-bp-to-em($bp-max) - (1/16);\n  }\n\n  // Conditions to skip media query creation\n  // - It's a named breakpoint that resolved to \"0 down\" or \"0 up\"\n  // - It's a numeric breakpoint that resolved to \"0 \" + anything\n  @if $bp > 0em or $dir == 'only' or $dir == 'down' {\n    // `only` ranges use the format `(min-width: n) and (max-width: n)`\n    @if $dir == 'only' {\n      // Only named media queries can have an \"only\" range\n      @if $named == true {\n        // Only use \"min-width\" if the floor is greater than 0\n        @if $bp > 0em {\n          $str: $str + '(min-width: #{$bp})';\n\n          // Only add \"and\" to the media query if there's a ceiling\n          @if $bp-max != null {\n            $str: $str + ' and ';\n          }\n        }\n\n        // Only use \"max-width\" if there's a ceiling\n        @if $bp-max != null {\n          $str: $str + '(max-width: #{$bp-max})';\n        }\n      }\n      @else {\n        @warn 'breakpoint(): Only named media queries can have an `only` range.';\n      }\n    }\n\n    // `down` ranges use the format `(max-width: n)`\n    @else if $dir == 'down' {\n      $max: if($named, $bp-max, $bp);\n\n      // Skip media query creation if input value is exactly \"0 down\",\n      // unless the function was called as \"small down\", in which case it's just \"small only\"\n      @if $named or $bp > 0em {\n        @if $max != null {\n          $str: $str + '(max-width: #{$max})';\n        }\n      }\n    }\n\n    // `up` ranges use the format `(min-width: n)`\n    @else if $bp > 0em {\n      $str: $str + '(min-width: #{$bp})';\n    }\n  }\n\n  @return $str;\n}\n\n/// Wraps a media query around the content you put inside the mixin. This mixin accepts a number of values:\n///  - If a string is passed, the mixin will look for it in the `$breakpoints` map, and use a media query there.\n///  - If a pixel value is passed, it will be converted to an em value using `$global-font-size` as the base.\n///  - If a rem value is passed, the unit will be changed to em.\n///  - If an em value is passed, the value will be used as-is.\n///\n/// @param {Keyword|Number} $value - Breakpoint name, or px, rem, or em value to process.\n///\n/// @output If the breakpoint is \"0px and larger\", outputs the content as-is. Otherwise, outputs the content wrapped in a media query.\n@mixin breakpoint($value) {\n  $str: breakpoint($value);\n  $bp: index($-zf-breakpoints-keys, $value);\n  $pbp: index($-zf-breakpoints-keys, $print-breakpoint);\n\n  $old-zf-size: null;\n\n  // Make breakpoint size available as a variable\n  @if global-variable-exists(-zf-size) {\n    $old-zf-size: $-zf-size;\n  }\n  $-zf-size: nth($value, 1) !global; // get the first value to account for `only` and `down` keywords\n\n  // If $str is still an empty string, no media query is needed\n  @if $str == '' {\n    @content;\n  }\n\n  // Otherwise, wrap the content in a media query\n  @else {\n    // For named breakpoints less than or equal to $print-breakpoint, add print to the media types\n    @if $bp != null and $bp <= $pbp {\n      @media print, screen and #{$str} {\n        @content;\n       }\n    }\n    @else {\n      @media screen and #{$str} {\n        @content;\n      }\n    }\n  }\n\n  @if $old-zf-size != null {\n    // Restore the old breakpoint size\n    $-zf-size: $old-zf-size !global;\n  } @else {\n    $-zf-size: null !global;\n  }\n}\n\n/// Convers the breakpoints map to a URL-encoded string, like this: `key1=value1&key2=value2`. The value is then dropped into the CSS for a special `<meta>` tag, which is read by the Foundation JavaScript. This is how we transfer values from Sass to JavaScript, so they can be defined in one place.\n/// @access private\n///\n/// @param {Map} $map - Map to convert.\n///\n/// @returns {String} A string containing the map's contents.\n@function -zf-bp-serialize($map) {\n  $str: '';\n  @each $key, $value in $map {\n    $str: $str + $key + '=' + -zf-bp-to-em($value) + '&';\n  }\n  $str: str-slice($str, 1, -2);\n\n  @return $str;\n}\n\n/// Find the next key in a map.\n/// @access private\n///\n/// @param {Map} $map - Map to traverse.\n/// @param {Mixed} $key - Key to use as a starting point.\n///\n/// @returns {Mixed} The value for the key after `$key`, if `$key` was found. If `$key` was not found, or `$key` was the last value in the map, returns `null`.\n@function -zf-map-next($map, $key) {\n\n  // Store the keys of the map as a list\n  $values: map-keys($map);\n\n  $i: 0;\n\n  // If the Key Exists, Get the index of the key within the map and add 1 to it for the next breakpoint in the map\n  @if (map-has-key($map, $key)) {\n    $i: index($values, $key) + 1;\n  }\n\n  // If the key doesn't exist, or it's the last key in the map, return null\n  @if ($i > length($map) or $i == 0) {\n    @return null;\n  }\n  // Otherwise, return the value\n  @else {\n    @return map-get($map, nth($values, $i));\n  }\n\n}\n\n/// Return a list of our named breakpoints less than $key. Useful for dealing with\n/// responsive gutters for the grid.\n/// @access private\n///\n/// @param {String} $key - Key to use as last breakpoint.\n///\n/// @returns {Array} The list of breakpoints up to and. If $key is auto, returns breakpoints above the zero\n@function -zf-breakpoints-less-than($key) {\n  $list: ();\n  $found_key: false;\n\n  @each $name in $-zf-breakpoints-keys {\n    @if ($name == $key) {\n      $found_key: true;\n    }\n    @if not $found_key {\n      $list: append($list, $name);\n    }\n  }\n  @return $list;\n}\n\n/// Return a list of our named breakpoints less than $key. Useful for dealing with\n/// responsive gutters for the grid.\n/// @access private\n///\n/// @param {String} $breakpoing - a named or non-named breakpoing.\n///\n/// @returns {Array} The list of breakpoints up to and. If $key is auto, returns breakpoints above the zero\n@function -zf-closest-named-breakpoint($breakpoint) {\n  $last: $-zf-zero-breakpoint;\n  $found: false;\n\n  $value: unitless-calc($breakpoint, 1px);\n  @each $key, $val in $breakpoints {\n    @if not $found {\n      @if unitless-calc($val) > $value {\n        $found: true;\n      } @else {\n        $last: $key;\n      }\n    }\n  }\n\n  @return $last;\n}\n\n/// Get a value for a breakpoint from a responsive config map or single value.\n/// - If the config is a single value, return it regardless of `$value`.\n/// - If the config is a map and has the key `$value`, the exact breakpoint value is returned.\n/// - If the config is a map and does *not* have the breakpoint, the value matching the next lowest breakpoint in the config map is returned.\n/// @access private\n///\n/// @param {Number|Map} $map - Responsive config map or single value.\n/// @param {Keyword} $value - Breakpoint name to use.\n///\n/// @return {Mixed} The corresponding breakpoint value.\n@function -zf-get-bp-val($map, $value) {\n  // If the given map is a single value, return it\n  @if type-of($map) == 'number' {\n    @return $map;\n  }\n\n\n  // Check if the breakpoint name exists globally\n  @if not map-has-key($breakpoints, $value) {\n    @if type-of($value) == 'number' {\n      $value: -zf-closest-named-breakpoint($value);\n    } @else {\n      @return null;\n    }\n  }\n  // Check if the breakpoint name exists in the local config map\n  @else if map-has-key($map, $value) {\n    // If it does, just return the value\n    @return map-get($map, $value);\n  }\n  // Otherwise, find the next lowest breakpoint and return that value\n  @else {\n    $anchor: null;\n    $found: false;\n\n    @each $key, $val in $breakpoints {\n      @if not $found {\n        @if map-has-key($map, $key) {\n          $anchor: $key;\n        }\n        @if $key == $value {\n          $found: true;\n        }\n      }\n    }\n\n    @return map-get($map, $anchor);\n  }\n}\n\n@if map-has-key($breakpoints, small) {\n  $small-up: screen;\n  $small-only: unquote('screen and #{breakpoint(small only)}');\n}\n\n@if map-has-key($breakpoints, medium) {\n  $medium-up: unquote('screen and #{breakpoint(medium)}');\n  $medium-only: unquote('screen and #{breakpoint(medium only)}');\n}\n\n@if map-has-key($breakpoints, large) {\n  $large-up: unquote('screen and #{breakpoint(large)}');\n  $large-only: unquote('screen and #{breakpoint(large only)}');\n}\n\n@if map-has-key($breakpoints, xlarge) {\n  $xlarge-up: unquote('screen and #{breakpoint(xlarge)}');\n  $xlarge-only: unquote('screen and #{breakpoint(xlarge only)}');\n}\n\n@if map-has-key($breakpoints, xxlarge) {\n  $xxlarge-up: unquote('screen and #{breakpoint(xxlarge)}');\n}\n"]}