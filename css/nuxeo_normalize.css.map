{"version":3,"sources":["../node_modules/open-sans-fontface/sass/_Regular.scss","../scss/_nuxeo-mixins.scss","../node_modules/open-sans-fontface/sass/_Italic.scss","../node_modules/open-sans-fontface/sass/_Semibold.scss","../node_modules/open-sans-fontface/sass/_SemiboldItalic.scss","../node_modules/open-sans-fontface/sass/_Bold.scss","../node_modules/open-sans-fontface/sass/_BoldItalic.scss","../node_modules/open-sans-fontface/sass/_ExtraBold.scss","../node_modules/open-sans-fontface/sass/_ExtraBoldItalic.scss","../scss/_nuxeo-base.scss","../scss/_settings.scss","../scss/components/_highlightjs.scss","../scss/components/_codeblock.scss","../node_modules/foundation-sites/scss/typography/_base.scss"],"names":[],"mappings":"AACA,WACE,wBCAA,6EACA,oYDCA,mBACA,iBAAkB,CEJpB,WACE,wBDAA,2EACA,2XCCA,mBACA,iBAAkB,CCJpB,WACE,wBFAA,+EACA,6YECA,gBACA,iBAAkB,CCJpB,WACE,wBHAA,2FACA,mcGCA,gBACA,iBAAkB,CCJpB,WACE,wBJAA,uEACA,yWICA,iBACA,iBAAkB,CCJpB,WACE,wBLAA,mFACA,+ZKCA,iBACA,iBAAkB,CCJpB,WACE,wBNAA,iFACA,sZMCA,gBACA,iBAAkB,CCJpB,WACE,wBPAA,6FACA,4cOCA,gBACA,iBAAkB,CCoBlB,EACE,0EClBmF,CDmBpF,MEvBC,gBACA,WACA,cACA,gBACA,YAAa,CACd,0BAIC,aAAc,CACf,sEAOC,UAAW,CACZ,uCAIC,UAAW,CACZ,oEAMC,UAAW,CACZ,2EAQC,UAAW,CACZ,8FASC,UAAW,CACZ,4BAIC,UAAW,CACZ,cAGC,sBACA,iBAAkB,CACnB,uCAIC,aACF,CAAE,eAGA,wBAAyB,CAC1B,eAGC,wBAAyB,CAC1B,0BAIC,gBAAiB,CAClB,eAGC,iBAAkB,CC9EpB,KACE,kBACA,wBAAyB,CAEzB,OACE,gBAAiB,CAClB,IAKD,gBACA,yBACA,kBACA,WACA,mDACA,0BACA,gBACA,oBACA,eACA,cACA,cACA,kBACA,oBAAqB,CAbvB,eAgBI,kBACA,QACA,KAAM,CAlBV,iBAsBI,sBACA,yBACA,kBACA,2EACA,WACA,UACA,UACA,gBACA,2BAA4B,CA9BhC,uBAsCM,wBFjByB,CErB/B,4BA0CM,iBAAkB,CA1CxB,mCA+CM,4CACA,2BACA,SACA,kBACA,WACA,yBACA,aACA,gBACA,sBACA,UACA,gBACA,oBACA,kBACA,kBACA,qBACA,iBACA,oBACA,gBACA,qBACA,eAAgB,CAlEtB,oCAuEM,6BACA,sBACA,WACA,aACA,SACA,UACA,oBACA,kBACA,QACA,eAAgB,CACjB,kCAIC,KACE,SAAU,CAGZ,GACE,SAAU,CAAA,CA1FlB,AAiFK,0BAIC,KACE,SAAU,CAGZ,GACE,SAAU,CAAA,CA1FlB,2PAoGQ,4BACA,AADA,oBACA,+BACA,AADA,uBACA,qCACA,AADA,6BACA,sCACA,AADA,8BACA,0CACA,AADA,kCACA,qBACA,oBAAqB,CA1G7B,sCA4HQ,eACA,UACA,QAAS,CA9HjB,uCAkIQ,oCACA,YACA,kBACA,UACA,QAAS,CAtIjB,sCA2IM,kBAAmB,CA3IzB,uBAiJI,SAAU,CAjJd,SAqJI,uBACA,SACA,UFhJM,CEPV,cA0JM,sBAAuB,CACxB,cAMH,cACA,+DACA,mBACA,gBACA,oBACA,iCCvFsC,CDyFtC,gBACE,QAAS,CATb,gDAeI,YAAa,CACd","file":"nuxeo_normalize.css","sourcesContent":["/* BEGIN Regular */\n@font-face {\n  font-family: 'Open Sans';\n  @include fontdef($OpenSansPath, $OpenSansVersion, \"Regular\");\n  font-weight: normal;\n  font-style: normal;\n}\n/* END Regular */\n","// This is from open-sans-fontface mixin because everyone uses _mixins.scss so there's a conflict\n@mixin fontdef($OpenSansPath, $OpenSansVersion, $FontType:\"Regular\") {\n  src:  url('#{$OpenSansPath}/#{$FontType}/OpenSans-#{$FontType}.eot?v=#{$OpenSansVersion}');\n  src:  url('#{$OpenSansPath}/#{$FontType}/OpenSans-#{$FontType}.eot?#iefix&v=#{$OpenSansVersion}') format('embedded-opentype'),\n        url('#{$OpenSansPath}/#{$FontType}/OpenSans-#{$FontType}.woff?v=#{$OpenSansVersion}') format('woff'),\n        url('#{$OpenSansPath}/#{$FontType}/OpenSans-#{$FontType}.ttf?v=#{$OpenSansVersion}') format('truetype'),\n        url('#{$OpenSansPath}/#{$FontType}/OpenSans-#{$FontType}.svg?v=#{$OpenSansVersion}##{$FontType}') format('svg');\n}\n","/* BEGIN Italic */\n@font-face {\n  font-family: 'Open Sans';\n  @include fontdef($OpenSansPath, $OpenSansVersion, \"Italic\");\n  font-weight: normal;\n  font-style: italic;\n}\n/* END Italic */\n","/* BEGIN Semibold */\n@font-face {\n  font-family: 'Open Sans';\n  @include fontdef($OpenSansPath, $OpenSansVersion, \"Semibold\");\n  font-weight: 600;\n  font-style: normal;\n}\n/* END Semibold */\n","/* BEGIN Semibold Italic */\n@font-face {\n  font-family: 'Open Sans';\n  @include fontdef($OpenSansPath, $OpenSansVersion, \"SemiboldItalic\");\n  font-weight: 600;\n  font-style: italic;\n}\n/* END Semibold Italic */\n","/* BEGIN Bold */\n@font-face {\n  font-family: 'Open Sans';\n  @include fontdef($OpenSansPath, $OpenSansVersion, \"Bold\");\n  font-weight: bold;\n  font-style: normal;\n}\n/* END Bold */\n","/* BEGIN Bold Italic */\n@font-face {\n  font-family: 'Open Sans';\n  @include fontdef($OpenSansPath, $OpenSansVersion, \"BoldItalic\");\n  font-weight: bold;\n  font-style: italic;\n}\n/* END Bold Italic */\n","/* BEGIN Extrabold */\n@font-face {\n  font-family: 'Open Sans';\n  @include fontdef($OpenSansPath, $OpenSansVersion, \"ExtraBold\");\n  font-weight: 800;\n  font-style: normal;\n}\n/* END Extrabold */\n","/* BEGIN Extrabold Italic */\n@font-face {\n  font-family: 'Open Sans';\n  @include fontdef($OpenSansPath, $OpenSansVersion, \"ExtraBoldItalic\");\n  font-weight: 800;\n  font-style: italic;\n}\n/* END Extrabold Italic */\n","// Nuxeo Base styling\n@import 'settings';\n\n// Nuxeo Mixins\n@import 'nuxeo-mixins';\n\n// @import 'Light';\n// @import 'LightItalic';\n@import 'Regular';\n@import 'Italic';\n@import 'Semibold';\n@import 'SemiboldItalic';\n@import 'Bold';\n@import 'BoldItalic';\n@import 'ExtraBold';\n@import 'ExtraBoldItalic';\n\n// Foundation base\n@import 'foundation';\n\n// Optional components that can be included outside of nuxeo-base-styles\n@import 'components/codeblock';\n\n@mixin nuxeo-base-styles {\n  // We could include settings and the base Foundation styles here\n  * {\n    font-family: $nuxeo-font-family;\n  }\n}\n","// Fonts\n$OpenSansPath: '//www.nuxeo.com/assets/fonts' !default;\n$OpenSansVersion: '1.1.0' !default;\n\n// Foundation helpers\n@import 'util/util';\n\n// Variables for use across the mixins\n$nuxeo-font-family: 'Open Sans', Roboto, 'Helvetica Neue', Helvetica, Arial, sans-serif;\n\n// Colours\n\n$foundation-palette: (\n  primary: #0067ff,\n  secondary: #73d2cf,\n  success: #3adb76,\n  warning: #ffae00,\n  alert: #cc4b37,\n);\n\n@include add-foundation-colors;\n\n$white: #fff;\n$black: #000;\n\n\n$nuxeo-color-darker-gray: #333;\n\n$nuxeo-color-accent: #ff452a;\n$nuxeo-color-accent-yellow: #e8ff7f;\n\n$nuxeo-color-light-blue: #ecf3f7;\n$nuxeo-color-dark-background: #000522;\n\n// Code Block\n$nuxeo-color-code-background: $white;\n$nuxeo-color-code-foreground: $black;\n$nuxeo-color-code-border: #d9e6f0;\n$code-border-radius: 4px;\n\n// Tooltips\n$tooltip-background-color: rgba(0, 0, 0, .8);\n$tooltip-text-color: $white;\n$tooltip-duration: .4s;\n$tooltip-delay: .2s;\n","\n@mixin nuxeo-highlightjs {\n  // Based upon Google Code style (c) Aahan Krish <geekpanth3r@gmail.com>\n  .hljs {\n    background: $nuxeo-color-code-background;\n    color: $nuxeo-color-code-foreground;\n    display: block;\n    overflow-x: auto;\n    padding: .5em;\n  }\n\n  .hljs-comment,\n  .hljs-quote {\n    color: #6a1b9a;\n  }\n\n  .hljs-keyword,\n  .hljs-selector-tag,\n  .hljs-section,\n  .hljs-title,\n  .hljs-name {\n    color: #008;\n  }\n\n  .hljs-variable,\n  .hljs-template-variable {\n    color: #660;\n  }\n\n  .hljs-string,\n  .hljs-selector-attr,\n  .hljs-selector-pseudo,\n  .hljs-regexp {\n    color: #080;\n  }\n\n  .hljs-literal,\n  .hljs-symbol,\n  .hljs-bullet,\n  .hljs-meta,\n  .hljs-number,\n  .hljs-link {\n    color: #066;\n  }\n\n  .hljs-title,\n  .hljs-doctag,\n  .hljs-type,\n  .hljs-attr,\n  .hljs-built_in,\n  .hljs-builtin-name,\n  .hljs-params {\n    color: #606;\n  }\n\n  .hljs-attribute,\n  .hljs-subst {\n    color: #000;\n  }\n\n  .hljs-formula {\n    background-color: #eee;\n    font-style: italic;\n  }\n\n  .hljs-selector-id,\n  .hljs-selector-class {\n    color: #9B703F\n  }\n\n  .hljs-addition {\n    background-color: #baeeba;\n  }\n\n  .hljs-deletion {\n    background-color: #ffc8bd;\n  }\n\n  .hljs-doctag,\n  .hljs-strong {\n    font-weight: bold;\n  }\n\n  .hljs-emphasis {\n    font-style: italic;\n  }\n}\n","@import 'highlightjs';\n\n@mixin nuxeo-codeblock {\n  @include nuxeo-highlightjs;\n\n  // Inline code\n  code {\n    border-radius: $code-border-radius;\n    overflow-wrap: break-word;\n\n    a > & {\n      border: 1px solid;\n    }\n  }\n\n  // Code block\n  pre {\n    background: $nuxeo-color-code-background;\n    border: solid 2px $nuxeo-color-code-border;\n    border-radius: $code-border-radius;\n    color: $nuxeo-color-code-foreground;\n    font-family: 'Courier 10 Pitch', Courier, monospace;\n    font-size: 15px !important;\n    line-height: 1.6;\n    margin-bottom: 1.6em;\n    max-width: 100%;\n    overflow: auto;\n    padding: 1.6em;\n    position: relative;\n    white-space: pre-wrap;\n\n    .copy-area {\n      position: absolute;\n      right: 0;\n      top: 0;\n    }\n\n    .copy-button {\n      background-color: lighten($nuxeo-color-code-border, 15%);\n      border: 1px solid #d5d5d5;\n      border-radius: 3px;\n      font-family: $nuxeo-font-family;\n      margin: 4px;\n      opacity: 0;\n      outline: 0;\n      padding: 4px 6px;\n      transition: opacity .4s ease;\n\n      &,\n      &:focus,\n      &:active {\n      }\n\n      &:hover {\n        background-color: $nuxeo-color-code-border;\n      }\n\n      &.tooltipped {\n        position: relative;\n      }\n\n      // This is the tooltip bubble\n      &.tooltipped::after {\n        -webkit-font-smoothing: subpixel-antialiased;\n        background: $tooltip-background-color;\n        border: 0;\n        border-radius: 3px;\n        color: $tooltip-text-color;\n        content: attr(aria-label);\n        display: none;\n        font-size: .8rem;\n        letter-spacing: normal;\n        opacity: 0;\n        padding: 5px 8px;\n        pointer-events: none;\n        position: absolute;\n        text-align: center;\n        text-decoration: none;\n        text-shadow: none;\n        text-transform: none;\n        white-space: pre;\n        word-wrap: break-word;\n        z-index: 1000000;\n      }\n\n      // This is the tooltip arrow\n      &.tooltipped::before {\n        border: 5px solid transparent;\n        color: $tooltip-background-color;\n        content: '';\n        display: none;\n        height: 0;\n        opacity: 0;\n        pointer-events: none;\n        position: absolute;\n        width: 0;\n        z-index: 1000001;\n      }\n\n      // // delay animation for tooltip\n      @keyframes tooltip-appear {\n        from {\n          opacity: 0;\n        }\n\n        to {\n          opacity: 1;\n        }\n      }\n\n      // This will indicate when we'll activate the tooltip\n      &.tooltipped:hover,\n      &.tooltipped:active,\n      &.tooltipped:focus {\n        &::before,\n        &::after {\n          animation-delay: $tooltip-delay;\n          animation-duration: $tooltip-duration;\n          animation-fill-mode: forwards;\n          animation-name: tooltip-appear;\n          animation-timing-function: ease-in;\n          display: inline-block;\n          text-decoration: none;\n        }\n      }\n\n      // .tooltipped-no-delay:hover,\n      // .tooltipped-no-delay:active,\n      // .tooltipped-no-delay:focus {\n      //   &::before,\n      //   &::after {\n      //     opacity: 1;\n      //     animation: none;\n      //   }\n      // }\n\n\n      // Tooltipped south\n      &.tooltipped-sw {\n        &::after {\n          margin-top: 5px;\n          right: 50%;\n          top: 100%;\n        }\n\n        &::before {\n          border-bottom-color: $tooltip-background-color;\n          bottom: -5px;\n          margin-right: -5px;\n          right: 50%;\n          top: auto;\n        }\n      }\n\n      &.tooltipped-sw::after {\n        margin-right: -15px;\n      }\n    }\n\n\n    &:hover .copy-button {\n      opacity: 1;\n    }\n\n    > code {\n      background: transparent;\n      border: 0;\n      color: $nuxeo-color-code-foreground;\n\n      > code {\n        background: transparent;\n      }\n    }\n  }\n\n  // Code panel\n  .code-heading {\n    color: $header-color;\n    font-family: $header-font-family;\n    font-weight: $header-font-weight;\n    line-height: $header-lineheight;\n    margin-bottom: -1rem;\n    text-rendering: $header-text-rendering;\n\n    p & {\n      margin: 0;\n    }\n\n    // Ignore empty paragraphs added by Markdown\n    ~ p:blank,\n    ~ p:empty {\n      display: none;\n    }\n  }\n\n  // code-header - Same as h4\n  // @if variable-exists(header-sizes) {\n  //   @each $size, $headers in $header-sizes {\n  //     @include breakpoint($size) {\n  //       .code-heading {\n  //         font-size: rem-calc(map-get($headers, 'h4'));\n  //       }\n  //     }\n  //   }\n  // } @else {\n  //   @each $size, $headers in $header-styles {\n  //     @include breakpoint($size) {\n  //       .code-heading {\n  //         font-size: rem-calc(map-get(map-get($headers, 'h4'), 'font-size'));\n  //       }\n  //     }\n  //   }\n  // }\n}\n","// Foundation for Sites by ZURB\n// foundation.zurb.com\n// Licensed under MIT Open Source\n\n////\n/// @group typography-base\n////\n\n// Base Typography\n// - - - - - - - - - - - - - - -\n// These are styles applied to basic HTML tags, including:\n//   - Paragraphs <p>\n//   - Bold/italics <b> <strong> <i> <em>\n//   - Small text <small>\n//   - Headings <h1>-<h6>\n//   - Anchors <a>\n//   - Dividers <hr>\n//   - Lists <ul> <ol> <dl>\n//   - Blockquotes <blockquote>\n//   - Code blocks <code>\n//   - Abbreviations <abbr>\n//   - Citations <cite>\n//   - Keystrokes <kbd>\n\n/// Font family for header elements.\n/// @type String | List\n$header-font-family: $body-font-family !default;\n\n/// Font weight of headers.\n/// @type String\n$header-font-weight: $global-weight-normal !default;\n\n/// Font style (e.g. italicized) of headers.\n/// @type String\n$header-font-style: normal !default;\n\n/// Font stack used for elements that use monospaced type, such as code samples\n/// @type String | List\n$font-family-monospace: Consolas, 'Liberation Mono', Courier, monospace !default;\n\n/// Color of headers.\n/// @type Color\n$header-color: inherit !default;\n\n/// Line height of headers.\n/// @type Number\n$header-lineheight: 1.4 !default;\n\n/// Bottom margin of headers.\n/// @type Number\n$header-margin-bottom: 0.5rem !default;\n\n/// Styles for headings at various screen sizes. Each key is a breakpoint, and each value is a map of heading styles.\n/// @type Map\n$header-styles: (\n  small: (\n    'h1': ('font-size': 24),\n    'h2': ('font-size': 20),\n    'h3': ('font-size': 19),\n    'h4': ('font-size': 18),\n    'h5': ('font-size': 17),\n    'h6': ('font-size': 16),\n  ),\n  medium: (\n    'h1': ('font-size': 48),\n    'h2': ('font-size': 40),\n    'h3': ('font-size': 31),\n    'h4': ('font-size': 25),\n    'h5': ('font-size': 20),\n    'h6': ('font-size': 16),\n  ),\n) !default;\n\n// $header-styles map is built from $header-sizes in order to ensure downward compatibility\n// when $header-sizes is depreciated, $header-styles needs to get !default values like settings.scss\n@function build_from_header-sizes($header-sizes) {\n  @warn 'Note, that $header-sizes has been replaced with $header-styles. $header-sizes still works, but it is going to be depreciated.';\n  $header-styles: ();\n  @each $size, $headers in $header-sizes {\n    $header-map: ();\n    @each $header, $font-size in $headers {\n      $header-map: map-merge($header-map, ($header: ('font-size': $font-size)));  \n    }\n    $header-styles: map-merge($header-styles, ($size: $header-map));\n  }\n  @return $header-styles;\n}\n\n// If it exists $headers-sizes is used to build $header-styles. See the documentation.\n@if variable-exists(header-sizes) {\n  $header-styles: build_from_header-sizes($header-sizes);\n}\n\n/// Text rendering method of headers.\n/// @type String\n$header-text-rendering: optimizeLegibility !default;\n\n/// Font size of `<small>` elements.\n/// @type Number\n$small-font-size: 80% !default;\n\n/// Color of `<small>` elements when placed inside headers.\n/// @type Color\n$header-small-font-color: $medium-gray !default;\n\n/// Line height of text inside `<p>` elements.\n/// @type Number\n$paragraph-lineheight: 1.6 !default;\n\n/// Bottom margin of paragraphs.\n/// @type Number\n$paragraph-margin-bottom: 1rem !default;\n\n/// Text rendering method for paragraph text.\n/// @type String\n$paragraph-text-rendering: optimizeLegibility !default;\n\n/// Text color of code samples.\n/// @type Color\n$code-color: $black !default;\n\n/// Font family of code samples.\n/// @type String | List\n$code-font-family: $font-family-monospace !default;\n\n/// Font weight of text in code samples.\n/// @type String\n$code-font-weight: $global-weight-normal !default;\n\n/// Background color of code samples.\n/// @type Color\n$code-background: $light-gray !default;\n\n/// Border around code samples.\n/// @type List\n$code-border: 1px solid $medium-gray !default;\n\n/// Padding around text of code samples.\n/// @type Number | List\n$code-padding: rem-calc(2 5 1) !default;\n\n/// Default color for links.\n/// @type Color\n$anchor-color: $primary-color !default;\n\n/// Default color for links on hover.\n/// @type Color\n$anchor-color-hover: scale-color($anchor-color, $lightness: -14%) !default;\n\n/// Default text decoration for links.\n/// @type String\n$anchor-text-decoration: none !default;\n\n/// Default text decoration for links on hover.\n/// @type String\n$anchor-text-decoration-hover: none !default;\n\n/// Maximum width of a divider.\n/// @type Number\n$hr-width: $global-width !default;\n\n/// Default border for a divider.\n/// @type List\n$hr-border: 1px solid $medium-gray !default;\n\n/// Default margin for a divider.\n/// @type Number | List\n$hr-margin: rem-calc(20) auto !default;\n\n/// Line height for items in a list.\n/// @type Number\n$list-lineheight: $paragraph-lineheight !default;\n\n/// Bottom margin for items in a list.\n/// @type Number\n$list-margin-bottom: $paragraph-margin-bottom !default;\n\n/// Bullet type to use for unordered lists (e.g., `square`, `circle`, `disc`).\n/// @type String\n$list-style-type: disc !default;\n\n/// Positioning for bullets on unordered list items.\n/// @type String\n$list-style-position: outside !default;\n\n/// Left (or right) margin for lists.\n/// @type Number\n$list-side-margin: 1.25rem !default;\n\n/// Left (or right) margin for a list inside a list.\n/// @type Number\n$list-nested-side-margin: 1.25rem !default;\n\n/// Bottom margin for `<dl>` elements.\n/// @type Number\n$defnlist-margin-bottom: 1rem !default;\n\n/// Font weight for `<dt>` elements.\n/// @type String\n$defnlist-term-weight: $global-weight-bold !default;\n\n/// Spacing between `<dt>` and `<dd>` elements.\n/// @type Number\n$defnlist-term-margin-bottom: 0.3rem !default;\n\n/// Text color of `<blockquote>` elements.\n/// @type Color\n$blockquote-color: $dark-gray !default;\n\n/// Padding inside a `<blockquote>` element.\n/// @type Number | List\n$blockquote-padding: rem-calc(9 20 0 19) !default;\n\n/// Side border for `<blockquote>` elements.\n/// @type List\n$blockquote-border: 1px solid $medium-gray !default;\n\n/// Font size for `<cite>` elements.\n/// @type Number\n$cite-font-size: rem-calc(13) !default;\n\n/// Text color for `<cite>` elements.\n/// @type Color\n$cite-color: $dark-gray !default;\n\n/// Pseudo content for `<cite>` elements.\n/// @type String\n$cite-pseudo-content: '\\2014 \\0020' !default;\n\n/// Font family for `<kbd>` elements.\n/// @type String | List\n$keystroke-font: $font-family-monospace !default;\n\n/// Text color for `<kbd>` elements.\n/// @type Color\n$keystroke-color: $black !default;\n\n/// Background color for `<kbd>` elements.\n/// @type Color\n$keystroke-background: $light-gray !default;\n\n/// Padding for `<kbd>` elements.\n/// @type Number | List\n$keystroke-padding: rem-calc(2 4 0) !default;\n\n/// Border radius for `<kbd>` elements.\n/// @type Number | List\n$keystroke-radius: $global-radius !default;\n\n/// Bottom border style for `<abbr>` elements.\n/// @type List\n$abbr-underline: 1px dotted $black !default;\n\n@mixin foundation-typography-base {\n  // Typography resets\n  div,\n  dl,\n  dt,\n  dd,\n  ul,\n  ol,\n  li,\n  h1,\n  h2,\n  h3,\n  h4,\n  h5,\n  h6,\n  pre,\n  form,\n  p,\n  blockquote,\n  th,\n  td {\n    margin: 0;\n    padding: 0;\n  }\n\n  // Paragraphs\n  p {\n    margin-bottom: $paragraph-margin-bottom;\n\n    font-size: inherit;\n    line-height: $paragraph-lineheight;\n    text-rendering: $paragraph-text-rendering;\n  }\n\n  // Emphasized text\n  em,\n  i {\n    font-style: italic;\n    line-height: inherit;\n  }\n\n  // Strong text\n  strong,\n  b {\n    font-weight: $global-weight-bold;\n    line-height: inherit;\n  }\n\n  // Small text\n  small {\n    font-size: $small-font-size;\n    line-height: inherit;\n  }\n\n  // Headings\n  h1, .h1,\n  h2, .h2,\n  h3, .h3,\n  h4, .h4,\n  h5, .h5,\n  h6, .h6 {\n    font-family: $header-font-family;\n    font-style: $header-font-style;\n    font-weight: $header-font-weight;\n    color: $header-color;\n    text-rendering: $header-text-rendering;\n\n    small {\n      line-height: 0;\n      color: $header-small-font-color;\n    }\n  }\n\n  // Heading styles\n  @each $size, $headers in $header-styles {\n    @include breakpoint($size) {\n      @each $header, $header-defs in $headers {\n        $font-size-temp: 1rem;\n        #{$header}, .#{$header} {\n\n          @if map-has-key($header-defs, font-size) {\n            $font-size-temp: rem-calc(map-get($header-defs, font-size));\n            font-size: $font-size-temp;\n          } @else if map-has-key($header-defs, fs) {\n            $font-size-temp: rem-calc(map-get($header-defs, fs));\n            font-size: $font-size-temp;\n          } @else if $size == $-zf-zero-breakpoint {\n            font-size: $font-size-temp;\n          }\n          @if map-has-key($header-defs, line-height) {\n            line-height: unitless-calc(map-get($header-defs, line-height), $font-size-temp);\n          } @else if map-has-key($header-defs, lh) {\n            line-height: unitless-calc(map-get($header-defs, lh), $font-size-temp);\n          } @else if $size == $-zf-zero-breakpoint {\n            line-height: unitless-calc($header-lineheight, $font-size-temp);\n          }\n\n          @if map-has-key($header-defs, margin-top) {\n            margin-top: rem-calc(map-get($header-defs, margin-top));\n          } @else if map-has-key($header-defs, mt) {\n            margin-top: rem-calc(map-get($header-defs, mt));\n          } @else if $size == $-zf-zero-breakpoint {\n            margin-top: 0;\n          }\n          @if map-has-key($header-defs, margin-bottom) {\n            margin-bottom: rem-calc(map-get($header-defs, margin-bottom));\n          } @else if map-has-key($header-defs, mb) {\n            margin-bottom: rem-calc(map-get($header-defs, mb));\n          } @else if $size == $-zf-zero-breakpoint {\n            margin-bottom: rem-calc($header-margin-bottom);\n          }\n        }\n      }\n    }\n  }\n\n  // Links\n  a {\n    line-height: inherit;\n    color: $anchor-color;\n    text-decoration: $anchor-text-decoration;\n\n    cursor: pointer;\n\n    &:hover,\n    &:focus {\n      color: $anchor-color-hover;\n      @if $anchor-text-decoration-hover != $anchor-text-decoration {\n        text-decoration: $anchor-text-decoration-hover;\n      }\n    }\n\n    img {\n      border: 0;\n    }\n  }\n\n  // Horizontal rule\n  hr {\n    clear: both;\n\n    max-width: $hr-width;\n    height: 0;\n    margin: $hr-margin;\n\n    border-top: 0;\n    border-right: 0;\n    border-bottom: $hr-border;\n    border-left: 0;\n  }\n\n  // Lists\n  ul,\n  ol,\n  dl {\n    margin-bottom: $list-margin-bottom;\n    list-style-position: $list-style-position;\n    line-height: $list-lineheight;\n  }\n\n  // List items\n  li {\n    font-size: inherit;\n  }\n\n  // Unordered lists\n  ul {\n    margin-#{$global-left}: $list-side-margin;\n    list-style-type: $list-style-type;\n  }\n\n  // Ordered lists\n  ol {\n    margin-#{$global-left}: $list-side-margin;\n  }\n\n  // Nested unordered/ordered lists\n  ul, ol {\n    & & {\n      margin-#{$global-left}: $list-nested-side-margin;\n      margin-bottom: 0;\n    }\n  }\n\n  // Definition lists\n  dl {\n    margin-bottom: $defnlist-margin-bottom;\n\n    dt {\n      margin-bottom: $defnlist-term-margin-bottom;\n      font-weight: $defnlist-term-weight;\n    }\n  }\n\n  // Blockquotes\n  blockquote {\n    margin: 0 0 $paragraph-margin-bottom;\n    padding: $blockquote-padding;\n    border-#{$global-left}: $blockquote-border;\n\n    &, p {\n      line-height: $paragraph-lineheight;\n      color: $blockquote-color;\n    }\n  }\n\n  // Citations\n  cite {\n    display: block;\n    font-size: $cite-font-size;\n    color: $cite-color;\n\n    &:before {\n      content: $cite-pseudo-content;\n    }\n  }\n\n  // Abbreviations\n  abbr, abbr[title] {\n    border-bottom: $abbr-underline;\n    cursor: help;\n    text-decoration: none;\n  }\n\n  // Figures\n  figure {\n    margin: 0;\n  }\n  \n  // Code\n  code {\n    padding: $code-padding;\n\n    border: $code-border;\n    background-color: $code-background;\n\n    font-family: $code-font-family;\n    font-weight: $code-font-weight;\n    color: $code-color;\n  }\n\n  // Keystrokes\n  kbd {\n    margin: 0;\n    padding: $keystroke-padding;\n\n    background-color: $keystroke-background;\n\n    font-family: $keystroke-font;\n    color: $keystroke-color;\n\n    @if has-value($keystroke-radius) {\n      border-radius: $keystroke-radius;\n    }\n  }\n}\n"]}